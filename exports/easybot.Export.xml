<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for UNIX (Ubuntu Server LTS for x86-64 Containers) 2025.1 (Build 223U)" ts="2025-03-31 01:35:26">
<Class name="easybot.bots.CustomAgent">
<Super>easybot.core.Agent</Super>
<TimeChanged>67294,79444.426569763</TimeChanged>
<TimeCreated>67294,79444.426569763</TimeCreated>

<Method name="DaysOfTheWeekAgent">
<Description>
Display: List the days of the week
Keywords: days of the week, weekend, weekday, holiday</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  // Resond with initial information about what you'll be doing...
  do response.Respond("Here is information I have on the days of the week...")

  // gather information on days of the week
  // ...somehow...
  set days = $LB("Sun","Mon","Tue","Wed","Thu","Fri","Sat")

  // Print each day 
  for i=1:1:$LISTLENGTH(days) {
    set day = $LISTGET(days, i)
    do response.ListItem(day)
  }
]]></Implementation>
</Method>
</Class>


<Class name="easybot.bots.DatabaseAgent">
<Super>easybot.core.Agent</Super>
<TimeChanged>67294,83964.545468723</TimeChanged>
<TimeCreated>67294,79444.428577112</TimeCreated>

<Method name="ListDatabases">
<Description>
Display: List Databases
Keywords: list databases, show databases</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Respond("Here are the databases I found:")
  do response.Respond("")

  do response.DisplayClassQuery("%SYS", "Config.Databases", "List", "Name,Directory")
]]></Implementation>
</Method>
</Class>


<Class name="easybot.bots.EnsAgent">
<Super>easybot.core.Agent</Super>
<TimeChanged>67294,85581.440294194</TimeChanged>
<TimeCreated>67294,79444.433133667</TimeCreated>

<Method name="ListInterfaces">
<Description>
Display: List Interfaces
Keywords: list interfaces, list components, show components, show interfaces</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Respond("Here are the interfaces I found:")
  do response.Respond("")

  do response.DisplayClassQuery($NAMESPACE, "Ens.Config.Production", "EnumerateConfigItemNames", "ConfigName,Enabled")
]]></Implementation>
</Method>

<Method name="StopInterface">
<Description>
Display: Stop Interface
Keywords: stop interface, disable interface</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Warning("I can't do this yet, but let's pretend...")
  do response.Println("")

  do response.Respond("Stopping Interface XYZ...")
]]></Implementation>
</Method>

<Method name="StartInterface">
<Description>
Display: Start Interface
Keywords: start interface, enable interface</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Warning("I can't do this yet, but let's pretend...")
  do response.Println("")

  do response.Respond("Starting Interface XYZ...")
]]></Implementation>
</Method>

<Method name="StopProduction">
<Description>
Display: Stop Production
Keywords: stop production, disable production</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Warning("I can't do this yet, but let's pretend...")
  do response.Println("")

  do response.Respond("Stopping Production XYZ...")
]]></Implementation>
</Method>

<Method name="StartProduction">
<Description>
Display: Start Production
Keywords: start production, enable production</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Warning("I can't do this yet, but let's pretend...")
  do response.Println("")

  do response.Respond("Starting Production XYZ...")
]]></Implementation>
</Method>
</Class>


<Class name="easybot.bots.HelpAgent">
<Super>easybot.core.Agent</Super>
<TimeChanged>67295,1850.851090153</TimeChanged>
<TimeCreated>67294,79444.437359586</TimeCreated>

<Method name="ListAgents">
<Description>
Display: List Bots/Agents
Keywords: list bots, list agents</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Respond("Here are the Agents currently loaded:")
  do response.Respond("")

  set status = ##class(easybot.core.TargetStore).ListAgents(.agents)

  if $$$ISERR(status) {
    do response.Error("Sorry. Unable to find the information", status)
    do response.Error("Try again...")
    return
  }

  for i=1:1:agents.Count() {
    do response.ListItem(agents.GetAt(i))
  }
]]></Implementation>
</Method>

<Method name="ListAgentDetails">
<Description>
Display: List Bots/Agents, and Menus
Keywords: menus, bot menus, agent menus</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Respond("Here are the Agents currently loaded:")
  do response.Respond("")

  set status = ##class(easybot.core.TargetStore).ListAgents(.agents)

  if $$$ISERR(status) {
    do response.Error("Sorry. Unable to find the information", status)
    do response.Error("Try again...")
    return
  }

  for i=1:1:agents.Count() {
    set agent = agents.GetAt(i)
    do response.Respond(agent)

    set status = ##class(easybot.core.TargetStore).ListItemsByAgent(agent, .menus)
    if $$$ISERR(status) {
      do response.Error("Unable to find information for "_agent, status)
      continue
    }

    for m=1:1:menus.Count() {
      do response.ListItem(menus.GetAt(m))
    }

    do response.Respond("")
  }
]]></Implementation>
</Method>

<Method name="Help">
<Description>
Display: EasyBot Help
Keywords: help</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Respond("Let me help explain.")
  do response.Respond("I'm an Agent here to help you accomplish tasks and discover information.")
  do response.Respond("I'm easily extensible with ObjectScript.")
  do response.Respond("")

  do response.LineBreak()
  do ..ListAgentDetails(.prompt, .response)

  do response.LineBreak()
  do response.Respond("")
  do ..ShellCommands(.prompt, .response)
]]></Implementation>
</Method>

<Method name="ShellCommands">
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Respond("Here are some EasyBot shell commands:")
  do response.Respond("")

  do response.ListItem("clear")
  do response.Respond("")

  do response.ListItem("exit")
  do response.ListItem("halt")
  do response.ListItem("h")
  do response.ListItem("q")
  do response.ListItem("quit")
  do response.Respond("")

  do response.ListItem("load")
  do response.ListItem("reset")
  do response.Respond("")

  do response.ListItem("debug")
  do response.ListItem("nodebug")
]]></Implementation>
</Method>
</Class>


<Class name="easybot.bots.JournalAgent">
<Super>easybot.core.Agent</Super>
<TimeChanged>67294,85214.89785854</TimeChanged>
<TimeCreated>67294,84085.152911955</TimeCreated>

<Method name="ShowJournalInfo">
<Description>
Display: Show Journal Settings
Keywords: journal information, journal settings</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Respond("Here are the Journal Settings for this instance...")
  do response.Respond("")

  set origNS = $NAMESPACE
  zn "%SYS"

  set status = ##class(Config.Journal).Get(.properties)

  zn origNS

  if $$$ISERR(status) {
    do response.Error("Sorry. Unable to find the information", status)
    do response.Error("Try again...")
    return
  }

  do response.TableHeader($LB("Setting", "Value"))

  set setting = ""
  set setting = $ORDER(properties(setting))

  while setting '= "" {
    set value = properties(setting)
    do response.TableRow($LB(setting, value))

    set setting = $ORDER(properties(setting))
  }
]]></Implementation>
</Method>

<Method name="ListJournals">
<Description>
Display: List Journal Files
Keywords: list journals, show journals, journal files</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[

  set origNS = $NAMESPACE
  zn "%SYS"

  set status = ##class(Config.Journal).Get(.properties)

  zn origNS

  if $$$ISERR(status) {
    do response.Error("Sorry. Unable to find the information", status)
    do response.Error("Try again...")
    return
  }

  do response.Respond("Here are the Journals I found...")
  do response.Println("")
  do response.DisplayClassQuery($NAMESPACE, "%File", "FileSet", "Name,Size,DateModified", properties("CurrentDirectory"), "*")
  do response.Println("")

  if properties("CurrentDirectory") '= properties("AlternateDirectory") {
    do response.Respond("...and the Alternate Journals I found...")
    do response.Println("")
    do response.DisplayClassQuery($NAMESPACE, "%File", "FileSet", "Name,Size,DateModified", properties("AlternateDirectory"), "*")
  }
]]></Implementation>
</Method>
</Class>


<Class name="easybot.bots.NamespaceAgent">
<Super>easybot.core.Agent</Super>
<TimeChanged>67294,83911.935239067</TimeChanged>
<TimeCreated>67294,79444.454438786</TimeCreated>

<Method name="ListNamespaces">
<Description>
Display: List Namespaces
Keywords: list namespaces, show namespaces</Description>
<FormalSpec><![CDATA[&prompt:easybot.core.Prompt,&response:easybot.core.ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  do response.Respond("Here are the namespaces I found:")
  do response.Respond("")

  do response.DisplayClassQuery("%SYS", "Config.Namespaces", "List", "Namespace,Globals,Routines")
]]></Implementation>
</Method>
</Class>


<Class name="easybot.core.Agent">
<Description>
Base class used for auto-loading Agents/Bots</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>67294,79444.459300125</TimeChanged>
<TimeCreated>67294,79444.459300125</TimeCreated>
</Class>


<Class name="easybot.core.Choice">
<Super>%RegisteredObject</Super>
<TimeChanged>67294,79444.469733032</TimeChanged>
<TimeCreated>67294,79444.469733032</TimeCreated>

<Property name="Display">
<Type>%String</Type>
</Property>

<Property name="TargetSpec">
<Type>%String</Type>
</Property>

<Property name="Value">
<Type>%String</Type>
</Property>
</Class>


<Class name="easybot.core.Embedder">
<Super>%RegisteredObject</Super>
<TimeChanged>67294,79444.463633278</TimeChanged>
<TimeCreated>67294,79444.463633278</TimeCreated>

<Property name="model">
<Type>%ObjectHandle</Type>
</Property>

<Method name="EmbedLength">
<ClassMethod>1</ClassMethod>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
  // The vector length of the model defined in InitModel().
  return 384
]]></Implementation>
</Method>

<Method name="InitModel">
<Language>python</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  import fastembed
  self.model = fastembed.TextEmbedding()

  return 1
]]></Implementation>
</Method>

<Method name="EmbedDocs">
<FormalSpec>docs:%ListOfDataTypes</FormalSpec>
<Language>python</Language>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
  import iris
  vecs = iris.cls('%ListOfDataTypes')._New()

  pydocs = []
  for i in range(docs.Count()):
    doc = docs.GetAt(i+1)
    pydocs.append(doc)

  for vec in self.model.embed(pydocs):
    vecstr = ','.join([str(i) for i in vec])
    vecs.Insert(vecstr)
  
  return vecs
]]></Implementation>
</Method>

<Method name="EmbedDoc">
<FormalSpec>doc:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set docs = ##class(%ListOfDataTypes).%New()
  do docs.Insert(doc)

  set vecs = ..EmbedDocs(docs)

  return vecs.GetAt(1)
]]></Implementation>
</Method>
</Class>


<Class name="easybot.core.Loader">
<Super>%RegisteredObject</Super>
<TimeChanged>67294,79444.480298735</TimeChanged>
<TimeCreated>67294,79444.480298735</TimeCreated>

<Method name="Load">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

  // Recreate the Target table
  set status = ##class(TargetStore).RecreateTable()
  if $$$ISERR(status) {
    return status
  }

  // Create an embedder
  set embedder = ##class(Embedder).%New()
  do embedder.InitModel()

  set classes = ..ListSubclasses("easybot.core.Agent")
  for i=1:1:classes.Count() {
    set cls = classes.GetAt(i)

    set status = ..LoadClass(cls, .embedder)
  }
]]></Implementation>
</Method>

<Method name="ListSubclasses">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[baseClass:%String,&status:%Status]]></FormalSpec>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  set rslts = ##class(%ListOfDataTypes).%New()

  set statement = ##class(%SQL.Statement).%New()
  set status = statement.%PrepareClassQuery("%Dictionary.ClassDefinition", "SubclassOf")

  if $$$ISERR(status) {
    return rslts
  }

  set rset = statement.%Execute(baseClass)

  while rset.%Next() {
    do rslts.Insert(rset.%Get("Name"))
  }

  return rslts
]]></Implementation>
</Method>

<Method name="LoadClass">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[className:%String,&embedder:Embedder]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  w "Loading "_className,!

  set cls = ##class(%Dictionary.ClassDefinition).%OpenId(className)

  for i=1:1:cls.Methods.Count() {
    set method = cls.Methods.GetAt(i)
    set spec = className_":"_method.Name

    set target = ##class(Target).%New()
    set target.ID = spec
    set target.Spec = spec
    set target.Display = spec
    set target.Type = "Agent"

    set keywords = ""

    set NEWLINE = $CHAR(13)_$CHAR(10)
    set lines = $LISTFROMSTRING(method.Description, NEWLINE)

    for n=1:1:$LISTLENGTH(lines) {
      set line = $LISTGET(lines, n)

      // Does the line contain a ":"
      if '(line [ ":") {
        // Nope, skip to next line
        continue
      }

      // Extract: label: Value
      set label = $PIECE(line, ":", 1)
      set value = $PIECE(line, ":", 2,*)

      // Remove leading/trailing whitespace
      set label = $ZSTRIP(label, "<>W")
      set value = $ZSTRIP(value, "<>W")

      // uppercase the label
      set label = $ZCONVERT(label, "U")

      // skip blank values
      if value = "" {
        continue
      }

      if label = "ID" {
        set target.ID = value
        continue
      }

      if label = "DISPLAY" {
        set target.Display = value
        continue
      }

      if (label = "TYPE") || (label = "GROUP") {
        set target.Type = value
        continue
      }

      if label = "KEYWORDS" {
        set $LIST(keywords, *+1) = value
        continue
      }
    }

    if $LISTLENGTH(keywords) > 0 {
      set fullkeywords = $LISTTOSTRING(keywords, "; ")
      set vec = embedder.EmbedDoc(fullkeywords)
      write " - "_target.Display,!
      set status = ##class(TargetStore).Insert(target.ID, target.Type, target.Spec, target.Display, fullkeywords, vec)
    }
  }

  write !

  return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="easybot.core.Prompt">
<Super>%RegisteredObject</Super>
<TimeChanged>67294,79444.484911751</TimeChanged>
<TimeCreated>67294,79444.484911751</TimeCreated>

<Property name="UserValue">
<Type>%String</Type>
</Property>

<Property name="Value">
<Type>%String</Type>
</Property>

<Property name="Vector">
<Type>%String</Type>
</Property>

<Method name="FromString">
<ClassMethod>1</ClassMethod>
<FormalSpec>userPrompt:%String</FormalSpec>
<ReturnType>Prompt</ReturnType>
<Implementation><![CDATA[
  set prompt = ##class(Prompt).%New()
  set prompt.UserValue = userPrompt
  set prompt.Value = userPrompt

  return prompt
]]></Implementation>
</Method>
</Class>


<Class name="easybot.core.PromptTransformer">
<Super>%RegisteredObject</Super>
<TimeChanged>67294,79444.500583344</TimeChanged>
<TimeCreated>67294,79444.500583344</TimeCreated>

<Method name="Handle">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[spec:%String,&prompt:Prompt,&response:ShellResponse]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do response.DEBUG(2, "PromptTransformer:Handle()", "spec="_spec)
  set status = $$$OK

  // Do nothing
  if spec = "" {
    return status
  }

  // Handle className:methodName specs
  set className = $PIECE(spec, ":", 1)
  set methodName = $PIECE(spec, ":", 2)

  try {
    do response.DEBUG(2, "PromptTransformer:Calling", "##class("_className_")."_methodName)
    do $CLASSMETHOD(className, methodName, prompt, .status, .response)
  } catch err {
    set status = $$$ERROR($$$GeneralError, "Error calling PromptTransformer spec: "_spec)
    return $$$ADDSC(status, $$$ERROR($$$GeneralError, err.DisplayString()))
  }

  return status
]]></Implementation>
</Method>

<Method name="NoOp">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[prompt:Prompt,&status:%Status,&response:ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  set status = $$$OK

  // Do something to prompt.Value.
  // Do NOT modify prompt.UserValue.
  //set prompt.Value = $ZCONVERT(prompt.Value, "U")
]]></Implementation>
</Method>

<Method name="Uppercase">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[prompt:Prompt,&status:%Status,&response:ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  set status = $$$OK

  set prompt.Value = $ZCONVERT(prompt.Value, "U")
]]></Implementation>
</Method>

<Method name="Lowercase">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[prompt:Prompt,&status:%Status,&response:ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  set status = $$$OK

  set prompt.Value = $ZCONVERT(prompt.Value, "L")
]]></Implementation>
</Method>

<Method name="Choose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[prompt:Prompt,&status:%Status,&response:ShellResponse]]></FormalSpec>
<Implementation><![CDATA[
  set status = $$$OK

  set prompt.Value = $ZCONVERT(prompt.Value, "L")
]]></Implementation>
</Method>
</Class>


<Class name="easybot.core.Session">
<Super>%RegisteredObject</Super>
<TimeChanged>67294,79444.499895516</TimeChanged>
<TimeCreated>67294,79444.499895516</TimeCreated>

<Property name="PromptTransformerSpec">
<Description>
Which "classname:methodname" should be called with the user prompt?

Method signature:
ClassMethod methodname(prompt As Prompt, ByRef status As %Status)

See easybot.core.PromptTransformer class.</Description>
<Type>%String</Type>
</Property>

<Property name="DebugLevel">
<Type>%Numeric</Type>
</Property>

<Property name="Choices">
<Type>Choice</Type>
<Collection>list</Collection>
</Property>

<Property name="CurrentGroup">
<Type>%String</Type>
</Property>

<Property name="Embedder">
<Type>Embedder</Type>
</Property>

<Method name="Init">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set ..DebugLevel = 0
  set ..Choices = ##class(%ListOfObjects).%New()
  set ..CurrentGroup = ""

  set ..Embedder = ##class(Embedder).%New()
  return ..Embedder.InitModel()
]]></Implementation>
</Method>

<Method name="Welcome">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[  return "How can I help you?"
]]></Implementation>
</Method>

<Method name="StoreState">
<Description>
Store any state from the response needed for the
next interaction.

For example, choices.</Description>
<FormalSpec><![CDATA[&response:ShellResponse]]></FormalSpec>
<ReturnType>ShellResponse</ReturnType>
<Implementation><![CDATA[
  set ..Choices = response.choices
  set ..CurrentGroup = response.currentGroup
  return response
]]></Implementation>
</Method>

<Method name="Chat">
<FormalSpec>userPrompt:%String</FormalSpec>
<ReturnType>ShellResponse</ReturnType>
<Implementation><![CDATA[
  set topN = 5
  set baseThreshold = 0.6
  set diffThreshold = 0.08

  // Init response object ***********************************************************
  set response = ##class(ShellResponse).%New()
  set response.error = $$$OK
  set response.DebugLevel = ..DebugLevel

  // Build and transform the prompt *************************************************
  do response.DEBUG(1, "Original Prompt", userPrompt)

  set prompt = ##class(Prompt).FromString(userPrompt)
  set status = ##class(PromptTransformer).Handle(..PromptTransformerSpec, .prompt, .response)
  set ..PromptTransformerSpec = ""

  do response.DEBUG(1, "Transformed Prompt", prompt.Value)

  if $$$ISERR(status) {
    // Don't respond here.  Allow the PromptTransformer
    // to respond to the user as needed.
    set response.error = status

    return ..StoreState(.response)
  }

  // Embed/Vectorize the Prompt ******************************************************
  do response.DEBUG(1, "Embedding Prompt")
  set prompt.Vector = ..Embedder.EmbedDoc(prompt.Value)

  // Handle Choices **********************************************************************
  if ..Choices.Count() > 0 {
    do response.DEBUG(1, "Selecting Choice from "_..Choices.Count()_" Choices", prompt.Value)

    // Valid choice
    if $ISVALIDNUM(prompt.Value, 0, 1, ..Choices.Count()) {
      set choice = ..Choices.GetAt(prompt.Value)
      set response = ..CallTarget(choice.TargetSpec, .prompt, .response)
      return ..StoreState(.response)
    }

    // Invalid choice
    do response.Respond("Try again.")
    do response.Respond("Choose one of these options...")
    for i=1:1:..Choices.Count() {
      set choice = ..Choices.GetAt(i)
      do response.Choice(choice.Display, choice.TargetSpec, choice.Value)
    }
    return ..StoreState(.response)

  }

  // Find all target Actions or Groups ***************************************************
  set allTargets = ##class(%ListOfObjects).%New()

  if ..CurrentGroup = "" {
    do response.DEBUG(1, "Finding Matches")
    set status = ##class(TargetStore).Query(prompt.Vector, .allTargets, topN)
  } else {
    do response.DEBUG(1, "Finding Matches for Group: "_..CurrentGroup)
    set status = ##class(TargetStore).QueryByType(prompt.Vector, ..CurrentGroup, .allTargets, topN)
  }

  for i=1:1:allTargets.Count() {
    set target = allTargets.GetAt(i)
    do response.DEBUG(2, "Matching Target", i_". "_target.Spec_" ("_$DECIMAL(target.Score,2)_")")
  }

  if $$$ISERR(status) {
    set response.error = status
    do response.Respond("Unable to help with that.")
    do response.Respond("Try again...")

    return ..StoreState(.response)
  }

  // Reduce Targets by Score *********************************************************
  set targets = ..ReduceTargets(.allTargets, baseThreshold, diffThreshold, .status) 

  // Choose or Call Target ***********************************************************
  // No matches
  if targets.Count() = 0 {
    do response.Respond("I couldn't find anything related to that.")
    do response.Respond("Try again...")

    return ..StoreState(.response)
  }

  // Single match...yeah!
  if targets.Count() = 1 {
    set target = targets.GetAt(1)
    set response = ..CallTarget(target.Spec, .prompt, .response)

    return ..StoreState(.response)
  }

  // Multiple possibilities
  do response.Respond("Choose one of these options...")
  for i=1:1:targets.Count() {
    set target = targets.GetAt(i)
    set score = $DECIMAL(target.Score, 2)

    set line = target.Display_" ("_score_")"
    do response.Choice(line, target.Spec, i)
  }

  // Return response *****************************************************************
  return ..StoreState(.response)
]]></Implementation>
</Method>

<Method name="ReduceTargets">
<FormalSpec><![CDATA[&targets:%ListOfObjects,baseThreshold:%Numeric=0.6,diffThreshold:%Numeric=0.1,&status:%Status]]></FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  set results = ##class(%ListOfObjects).%New()

  if targets.Count() = 0 {
    // Nothing to do
    return results
  }

  set top = targets.GetAt(1)
  if top.Score <= baseThreshold {
    return results
  }

  do results.Insert(top)

  if targets.Count() = 1 {
    // Nothing else to do
    return results
  }

  set thresh = top.Score - diffThreshold
  if baseThreshold > thresh {
    set thresh = baseThreshold
  }

  for i=2:1:targets.Count() {
    set target = targets.GetAt(i)

    if target.Score > thresh {
      do results.Insert(target)
    } else {
      // doesn't match threshold, bail out early
      return results
    }
  }

  return results
]]></Implementation>
</Method>

<Method name="CallTarget">
<FormalSpec><![CDATA[spec:%String,&prompt:Prompt,&response:ShellResponse]]></FormalSpec>
<ReturnType>ShellResponse</ReturnType>
<Implementation><![CDATA[
  set className = $PIECE(spec, ":", 1)
  set methodName = $PIECE(spec, ":", 2)

  set inst = $CLASSMETHOD(className, "%New")
  do $METHOD(inst, methodName, .prompt, .response)
  return response
]]></Implementation>
</Method>
</Class>


<Class name="easybot.core.Shell">
<Super>%RegisteredObject</Super>
<TimeChanged>67295,5648.770397143</TimeChanged>
<TimeCreated>67294,79444.506444864</TimeCreated>

<Property name="UserPS1">
<Type>%String</Type>
</Property>

<Property name="ResponsePS1">
<Type>%String</Type>
</Property>

<Property name="ListItemPS1">
<Type>%String</Type>
</Property>

<Property name="NumberedItemPS1">
<Type>%String</Type>
</Property>

<Property name="WarningPS1">
<Type>%String</Type>
</Property>

<Property name="ErrorPS1">
<Type>%String</Type>
</Property>

<Property name="UnknownPS1">
<Type>%String</Type>
</Property>

<Property name="DebugPS1">
<Type>%String</Type>
</Property>

<Property name="ChoicePS1">
<Type>%String</Type>
</Property>

<Method name="Run">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set shell = ##class(Shell).%New()
  set shell.UserPS1         = ">>> "
  //set shell.ResponsePS1     = "  ð¤| "
  set shell.ResponsePS1     = "    | "
  set shell.ListItemPS1     = "    | - "
  set shell.NumberedItemPS1 = "    | # "
  set shell.WarningPS1      = "   !| "
  set shell.ErrorPS1        = " !!!| "
  set shell.UnknownPS1      = "??? | "
  set shell.DebugPS1        = "##### "
  set shell.ChoicePS1       = "      #. "

  do shell.Start()
]]></Implementation>
</Method>

<Method name="Start">
<Implementation><![CDATA[
  //set builtins = ##class(%SYS.Python).Import("builtins")
  //set None = ##class(%SYS.Python).None()
  //set easybotpy = ##class(%SYS.Python).Import("easybotpy")
  set session = ##class(Session).%New()
  set status = session.Init()
  set choices = 0
  // set choices(#) = $LB("CHOICE", display, targetSpec, value)

  if $$$ISERR(status) {
    do ..HandleError(status)
  }

  // Print a welcome message
  w session.Welcome(),!

  // Turn off terminal history
  use 0:(:"-R")

  // START REPL Loop #########################################################################
  while 1 {
    if session.CurrentGroup '= "" {
      write "Current Menu: "_session.CurrentGroup,!
    }
    write ..UserPS1
    read prompt,!

    // Ignore blank lines
    if (prompt = "") {
      continue
    }

    // Handle exits
    if (prompt = "exit") || (prompt = "quit") || (prompt = "halt") || (prompt = "h") || (prompt = "q") {
      // Quit out of the while loop, not the function
      quit
    }

    // Handle clear screen
    if (prompt = "clear") {
      write #
      continue
    }

    // Handle debugging
    if (prompt = "debug") {
      set session.DebugLevel = session.DebugLevel + 1
      w "Increasing debugging to ",session.DebugLevel,!
      continue
    }

    // Handle debugging
    if (prompt = "nodebug") {
      w "Turning off debugging",!
      set session.DebugLevel = 0
      continue
    }

    // Handle reset
    if (prompt = "reset") {
      w "Resetting chat",!
      do session.Init()
      continue
    }

    // Handle load
    if (prompt = "load") {
      w "Reloading",!
      do ##class(easybot.core.Loader).Load()
      continue
    }

    // Process Prompt ##################
    set response = session.Chat(prompt)
    do ..PrintLines(response.lines)

    if $$$ISERR(response.error) {
      do ..HandleError(response.error)
    }
    // #################################
  }
  // END REPL Loop ###########################################################################

  // Turn on terminal history
  use 0:(:"+R")
]]></Implementation>
</Method>

<Method name="PrintLines">
<FormalSpec><![CDATA[&lines:%String,lineDelay:%Numeric="0.03"]]></FormalSpec>
<Implementation><![CDATA[
  set count = lines.Count()
  set choices = 0
  set numitems = 0

  set tableWidths = ##class(%ListOfDataTypes).%New()

  for i=1:1:count {
    set line = lines.GetAt(i)

    set type = $LISTGET(line, 1)
    set value = $LISTGET(line, 2)

    if type = "LINE" {
      write value,!

    } elseif type = "RESPONSE" {
      write ..ResponsePS1_value,!

    } elseif type = "WARNING" {
      write ..WarningPS1_value,!

    } elseif type = "ERROR" {
      write ..ErrorPS1_value,!

    } elseif type = "LISTITEM" {
      write ..ListItemPS1_value,!

    } elseif type = "NUMBEREDITEM" {
      set numitems = numitems + 1
      set ps1 = $REPLACE(..NumberedItemPS1, "#", numitems)
      write ps1_value,!

    } elseif type = "TABLEHEADER" {
      if tableWidths.Count() = 0 {
        set tableWidths = ..GetTableWidths(.lines, i)
      }

      set value = ..FormatTableRow(value, .tableWidths)
      write value,!
      write "--------------------------------------------------------------------------------",!

    } elseif type = "TABLEROW" {
      if tableWidths.Count() = 0 {
        set tableWidths = ..GetTableWidths(.lines, i)
      }

      set value = ..FormatTableRow(value, .tableWidths)
      write value,!

    } elseif type = "LINEBREAK" {
      write ..ResponsePS1_"--------------------------------------------------------------------------------",!

    } elseif type = "DEBUG" {
      set rightSide = $LISTGET(line,3)
      set level = $LISTGET(line,4)

      set fullvalue = ..toColumnString(value, rightSide, 40)
      write ..DebugPS1_fullvalue,!

    } elseif type = "CHOICE" {
      set choices = choices + 1

      set choice = $LISTGET(line, 3)

      set ps1 = $REPLACE(..ChoicePS1, "#", choices)
      write ps1_value,!

    } else {
      write ..UnknownPS1_value,!
    }

    // Sleep to simulate typing
    if lineDelay > 0 {
      hang lineDelay
    }
  }
]]></Implementation>
</Method>

<Method name="GetTableWidths">
<FormalSpec><![CDATA[&lines:%String,startLine:%Numeric=1]]></FormalSpec>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
  set widths = ##class(%ListOfDataTypes).%New()

  for i=startLine:1:lines.Count() {
    set line = lines.GetAt(i)

    set type = $LISTGET(line, 1)
    set row = $LISTGET(line, 2)

    if (type '= "TABLEHEADER") && (type '= "TABLEROW") {
      // skip this row
      continue
    }

    set numCols = $LISTLENGTH(row)

    for c=1:1:(numCols-widths.Count()) {
      do widths.Insert(0)
    }

    for c=1:1:numCols {
      set w = $LENGTH($LISTGET(row, c))

      if widths.Count() < c {
        do widths.Insert(0)
      }

      if w > widths.GetAt(c) {
        do widths.SetAt(w, c)
      }
    }
  }

  return widths
]]></Implementation>
</Method>

<Method name="FormatTableRow">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[row:%String,&widths:%ListOfDataTypes]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set rslt = ""

  for c=1:1:$LISTLENGTH(row) {
    set col = $LISTGET(row, c)
    set w = widths.GetAt(c)

    for i=1:1:w-$LENGTH(col) {
      set col = col_" "
    }

    set rslt = rslt_" | "_col
  }

  return rslt
]]></Implementation>
</Method>

<Method name="toColumnString">
<ClassMethod>1</ClassMethod>
<FormalSpec>col1,col2:%String,col1Width:%Numeric=40</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  if col2 = "" {
    return col1
  }

  set len = $LENGTH(col1)

  set spaces = " "

  if len >= col1Width {
    return col1_spaces_col2
  }

  for i=1:1:col1Width-len {
    set spaces = spaces_" "
  }

  return col1_spaces_col2
]]></Implementation>
</Method>

<Method name="HandleError">
<FormalSpec>error:%Status</FormalSpec>
<Implementation><![CDATA[
  set lines = ##class(%ListOfDataTypes).%New()

  do lines.Insert($LB("ERROR", "==================================================================================="))
  do lines.Insert($LB("ERROR", $SYSTEM.Status.GetErrorText(error)))
  do lines.Insert($LB("ERROR", ""))
  do lines.Insert($LB("ERROR", "==================================================================================="))

  do ..PrintLines(.lines)
]]></Implementation>
</Method>
</Class>


<Class name="easybot.core.ShellResponse">
<Super>%RegisteredObject</Super>
<TimeChanged>67295,3832.629533685</TimeChanged>
<TimeCreated>67294,79444.50827833</TimeCreated>

<Property name="lines">
<Description>
Buffer of lines for this response.
These will be displayed by the user interface once
it receives the response.</Description>
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="error">
<Description>
Which error/status to pass to user interface?</Description>
<Type>%Status</Type>
</Property>

<Property name="choices">
<Description>
Which choices have been given to the user
with this response?</Description>
<Type>Choice</Type>
<Collection>list</Collection>
</Property>

<Property name="currentGroup">
<Description>
The current menu group we are limited to.</Description>
<Type>%String</Type>
</Property>

<Property name="PromptTransformerSpec">
<Description>
Which "classname:methodname" should be called with the user prompt?

Method signature:
ClassMethod methodname(prompt As Prompt, ByRef status As %Status)

See easybot.core.PromptTransformer class.</Description>
<Type>%String</Type>
</Property>

<Property name="PS1">
<Description>
What to prepend to response lines called with Respond(line)</Description>
<Type>%String</Type>
</Property>

<Property name="DebugLevel">
<Description>
What DebugLevel is active?</Description>
<Type>%Numeric</Type>
</Property>

<Property name="DebugPS1">
<Description>
What to prepend to debug lines</Description>
<Type>%String</Type>
</Property>

<Method name="Println">
<Description>
Add a regular line to the output lines.
Use this for result output.
Use Respond(line) for "conversing" with the user.</Description>
<FormalSpec>line:%String,prefix:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  return ..lines.Insert($LB("LINE", line))
]]></Implementation>
</Method>

<Method name="Respond">
<Description>
Add a response line to the output.
Use this for "conversing" with the user.
Use Println(line) for result output.</Description>
<FormalSpec>line:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  return ..lines.Insert($LB("RESPONSE", line))
]]></Implementation>
</Method>

<Method name="Error">
<Description>
Add an error line to the output.
Use this for responding with bad news.</Description>
<FormalSpec>line:%String,status:%Status=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = ..lines.Insert($LB("ERROR", line))

  if status '= "" {
    set errLine = $SYSTEM.Status.GetErrorText(status)
    do ..lines.Insert($LB("ERROR", errLine))
  }

  return sc
]]></Implementation>
</Method>

<Method name="Warning">
<Description>
Add a warning line to the output.
Use this for responding with some caution.</Description>
<FormalSpec>line:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  return ..lines.Insert($LB("WARNING", line))
]]></Implementation>
</Method>

<Method name="ListItem">
<Description>
Add a list item line to the output.</Description>
<FormalSpec>line:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  return ..lines.Insert($LB("LISTITEM", line))
]]></Implementation>
</Method>

<Method name="NumberedItem">
<Description>
Add a numbered list item line to the output.</Description>
<FormalSpec>line:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  return ..lines.Insert($LB("NUMBEREDITEM", line))
]]></Implementation>
</Method>

<Method name="TableHeader">
<Description>
Add a table header to the output</Description>
<FormalSpec>line:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  return ..lines.Insert($LB("TABLEHEADER", line))
]]></Implementation>
</Method>

<Method name="TableRow">
<Description>
Add a table row to the output</Description>
<FormalSpec>line:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  return ..lines.Insert($LB("TABLEROW", line))
]]></Implementation>
</Method>

<Method name="LineBreak">
<Description>
Add a line break</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  return ..lines.Insert($LB("LINEBREAK", "---------"))
]]></Implementation>
</Method>

<Method name="Choice">
<Description>
Add a choice line to the output.
Use this for "conversing" with the user.
Use Println(line) for result output.</Description>
<FormalSpec>line,targetSpec,value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set choice = ##class(Choice).%New()
  set choice.Display = line
  set choice.TargetSpec = targetSpec
  set choice.Value = value

  do ..choices.Insert(choice)

  return ..lines.Insert($LB("CHOICE", choice.Display, choice))
]]></Implementation>
</Method>

<Method name="DEBUG">
<Description>
Add a debug line if DebugLevel is high enough.</Description>
<FormalSpec>level:%Numeric,message:%String,rightSide:%String=""</FormalSpec>
<Implementation><![CDATA[
  if ..DebugLevel < level {
    return 
  }

  return ..lines.Insert($LB("DEBUG", message, rightSide, ..DebugLevel))
]]></Implementation>
</Method>

<Method name="NextPrompt">
<Description>
Which PromptTransformer function should be used
to process the user's next input?

See easybot.core.PromptTransformer for info on the
spec format.</Description>
<FormalSpec>promptTransformerSpec:%String</FormalSpec>
<Implementation><![CDATA[  set ..PromptTransformerSpec = promptTransformerSpec
]]></Implementation>
</Method>

<Method name="EnterGroup">
<FormalSpec>group:%String</FormalSpec>
<Implementation><![CDATA[  set ..currentGroup = group
]]></Implementation>
</Method>

<Method name="DisplayClassQuery">
<FormalSpec>namespace:%String,className:%String,queryName:%String,fieldList:%String="",Args...</FormalSpec>
<Implementation><![CDATA[
  set fieldList = $REPLACE(fieldList, ";", ",")
  set fieldList = $REPLACE(fieldList, ":", ",")
  set fieldList = $REPLACE(fieldList, " ", ",")
  set fieldList = $REPLACE(fieldList, "|", ",")
  set fields = $LISTFROMSTRING(fieldList, ",")
  set numFields = $LISTLENGTH(fields)

  set origNS = $NAMESPACE
  zn namespace

  set statement = ##class(%SQL.Statement).%New()
  set status = statement.%PrepareClassQuery(className, queryName)
  if $$$ISERR(status) {
    do ..Error("Sorry. Unable to run class query.", status)
    do ..Error("Try again...")
    return
  }

  set rset = statement.%Execute(Args...)

  do ..TableHeader(fields)

  while rset.%Next() {
    set line = ""
    for i=1:1:numFields {
      set field = $LISTGET(fields, i)
      set field = $ZSTRIP(field, "<>W")

      set $LIST(line, *+1) = rset.%Get(field)
    }

    do ..TableRow(line)
  }

  kill rset
  zn origNS
]]></Implementation>
</Method>
</Class>


<Class name="easybot.core.Target">
<Super>%RegisteredObject</Super>
<TimeChanged>67294,79444.526628231</TimeChanged>
<TimeCreated>67294,79444.526628231</TimeCreated>

<Property name="ID">
<Type>%Library.String</Type>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Type">
<Type>%Library.String</Type>
<SqlColumnNumber>3</SqlColumnNumber>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Spec">
<Type>%Library.String</Type>
<SqlColumnNumber>4</SqlColumnNumber>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Display">
<Type>%Library.String</Type>
<SqlColumnNumber>5</SqlColumnNumber>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Keywords">
<Type>%Stream.GlobalCharacter</Type>
<SqlColumnNumber>6</SqlColumnNumber>
</Property>

<Property name="Score">
<Type>%Numeric</Type>
</Property>
</Class>


<Class name="easybot.core.TargetStore">
<Super>%RegisteredObject</Super>
<TimeChanged>67295,1104.143952063</TimeChanged>
<TimeCreated>67294,79444.526450543</TimeCreated>

<Method name="CreateTable">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set vecLength = ##class(Embedder).EmbedLength()

  set query = ""
    _"CREATE TABLE easybot_store.Targets ("
    _"  ID              VARCHAR(255),"
    _"  Type            VARCHAR(255),"
    _"  Spec            VARCHAR(255),"
    _"  Display         VARCHAR(255),"
    _" "
    _"  Keywords        TEXT,"
    _"  Embedding       VECTOR(DOUBLE, "_vecLength_")"
    _")"
  
  set statement = ##class(%SQL.Statement).%New()
  set sc = statement.%Prepare(query)

  if $$$ISERR(sc) {
    return sc
  }

  return statement.%Execute()
]]></Implementation>
</Method>

<Method name="DropTable">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set query = "DROP TABLE easybot_store.Targets"
  
  set statement = ##class(%SQL.Statement).%New()
  set sc = statement.%Prepare(query)

  if $$$ISERR(sc) {
    return sc
  }

  return statement.%Execute()
]]></Implementation>
</Method>

<Method name="RecreateTable">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = ..DropTable()
  if $$$ISERR(sc) {
    return sc
  }

  return ..CreateTable()
]]></Implementation>
</Method>

<Method name="Insert">
<ClassMethod>1</ClassMethod>
<FormalSpec>id,type,spec,display,keywords,vec</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set query = ""
    _"INSERT INTO easybot_store.Targets ("
    _"  ID, Type, Spec, Display, Keywords, Embedding"
    _") VALUES ( ?, ?, ?, ?, ?, TO_VECTOR(?, DOUBLE))"
  
  set statement = ##class(%SQL.Statement).%New()
  set sc = statement.%Prepare(query)

  if $$$ISERR(sc) {
    return sc
  }

  return statement.%Execute(id, type, spec, display, keywords, vec)
]]></Implementation>
</Method>

<Method name="QueryByType">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[vec:%String,targetType:%String,&results:%ListOfObjects,topN:%Numeric=5]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set query = ""
    _"SELECT TOP ?"
    _"  ID, Type, Spec, Display, Keywords, VECTOR_DOT_PRODUCT(Embedding, TO_VECTOR(?, DOUBLE)) as Score"
    _" FROM easybot_store.Targets"
    _" WHERE Type = ?"
    _" ORDER BY Score DESC"
  
  set statement = ##class(%SQL.Statement).%New()
  set sc = statement.%Prepare(query)

  if $$$ISERR(sc) {
    return sc
  }

  set rset = statement.%Execute(topN, vec, targetType)

  return ..handleQueryResults(.rset, .results)
]]></Implementation>
</Method>

<Method name="Query">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[vec:%String,&results:%ListOfObjects,topN:%Numeric=5]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set query = ""
    _"SELECT TOP ?"
    _"  ID, Type, Spec, Display, Keywords, VECTOR_DOT_PRODUCT(Embedding, TO_VECTOR(?, DOUBLE)) as Score"
    _" FROM easybot_store.Targets"
    _" WHERE Type in ('GROUP', 'AGENT')"
    _" ORDER BY Score DESC"
  
  set statement = ##class(%SQL.Statement).%New()
  set sc = statement.%Prepare(query)

  if $$$ISERR(sc) {
    return sc
  }

  set rset = statement.%Execute(topN, vec)

  return ..handleQueryResults(.rset, .results)
]]></Implementation>
</Method>

<Method name="handleQueryResults">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&rset:%SQL.StatementResult,&results:%ListOfObjects]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if rset.%SQLCODE < 0 {
    set err = $System.Error.FromSQLCode(rset.%SQLCODE, "Error querying easybot_store.Targets") 
    return err.Status
  }

  while rset.%Next() {
    set target = ##class(easybot.core.Target).%New()
    set target.ID       = rset.%Get("ID")
    set target.Type     = rset.%Get("Type")
    set target.Spec     = rset.%Get("Spec")
    set target.Display  = rset.%Get("Display")
    set target.Keywords = rset.%Get("Keywords")
    set target.Score    = rset.%Get("Score")

    do results.Insert(target)
  }

  return $$$OK
]]></Implementation>
</Method>

<Method name="ListAgents">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&results:%ListOfDataTypes]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set results = ##class(%ListOfDataTypes).%New()

  set query = ""
    _"SELECT Distinct"
    _" $PIECE(Spec,':',1) As Agent"
    _" FROM easybot_store.Targets"
    _" ORDER BY Agent"
  
  set statement = ##class(%SQL.Statement).%New()
  set sc = statement.%Prepare(query)

  if $$$ISERR(sc) {
    return sc
  }

  set rset = statement.%Execute()

  while rset.%Next() {
    do results.Insert(rset.%Get("Agent"))
  }

  return $$$OK
]]></Implementation>
</Method>

<Method name="ListItemsByAgent">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[agent:%String,&results:%ListOfDataTypes]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set results = ##class(%ListOfDataTypes).%New()

  set query = ""
    _"SELECT "
    _" Display"
    _" FROM easybot_store.Targets"
    _" WHERE Spec LIKE ?"
    _" ORDER BY Display"
  
  set statement = ##class(%SQL.Statement).%New()
  set sc = statement.%Prepare(query)

  if $$$ISERR(sc) {
    return sc
  }

  set rset = statement.%Execute(agent_":%")

  while rset.%Next() {
    do results.Insert(rset.%Get("Display"))
  }

  return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="easybot.store.Targets">
<Description>
</Description>
<Final>1</Final>
<ClassType>persistent</ClassType>
<DdlAllowed>1</DdlAllowed>
<Owner>irisowner</Owner>
<ProcedureBlock>1</ProcedureBlock>
<SqlRowIdPrivate>1</SqlRowIdPrivate>
<SqlTableName>Targets</SqlTableName>
<Super>%Persistent</Super>
<TimeChanged>67295,1736.364659643</TimeChanged>
<TimeCreated>67295,1730.697939679</TimeCreated>

<Property name="ID">
<Type>%Library.String</Type>
<Collection/>
<Required>0</Required>
<SqlColumnNumber>2</SqlColumnNumber>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Type">
<Type>%Library.String</Type>
<Collection/>
<Required>0</Required>
<SqlColumnNumber>3</SqlColumnNumber>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Spec">
<Type>%Library.String</Type>
<Collection/>
<Required>0</Required>
<SqlColumnNumber>4</SqlColumnNumber>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Display">
<Type>%Library.String</Type>
<Collection/>
<Required>0</Required>
<SqlColumnNumber>5</SqlColumnNumber>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Keywords">
<Type>%Stream.GlobalCharacter</Type>
<Collection/>
<Required>0</Required>
<SqlColumnNumber>6</SqlColumnNumber>
</Property>

<Property name="Embedding">
<Type>%Library.Vector</Type>
<Collection/>
<Required>0</Required>
<SqlColumnNumber>7</SqlColumnNumber>
<Parameter name="DATATYPE" value="DOUBLE"/>
<Parameter name="LEN" value="384"/>
</Property>

<Index name="DDLBEIndex">
<Description>
Bitmap Extent Index auto-generated by DDL CREATE TABLE statement.  Do not edit the SqlName of this index.</Description>
<Type>bitmap</Type>
<Extent>1</Extent>
<Properties/>
<SqlName>%%DDLBEIndex</SqlName>
</Index>

<Parameter name="USEEXTENTSET">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^D1oJ.Bm7r.1</DataLocation>
<DefaultData>TargetsDefaultData</DefaultData>
<IdLocation>^D1oJ.Bm7r.1</IdLocation>
<IndexLocation>^D1oJ.Bm7r.I</IndexLocation>
<StreamLocation>^D1oJ.Bm7r.S</StreamLocation>
<ExtentSize>13</ExtentSize>
<IdFunction>sequence</IdFunction>
<ExtentLocation>^D1oJ.Bm7r</ExtentLocation>
<Data name="TargetsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>ID</Value>
</Value>
<Value name="2">
<Value>Type</Value>
</Value>
<Value name="3">
<Value>Spec</Value>
</Value>
<Value name="4">
<Value>Display</Value>
</Value>
<Value name="5">
<Value>Keywords</Value>
</Value>
</Data>
<Data name="_GBL_Embedding">
<Attribute>Embedding</Attribute>
<Structure>node</Structure>
<DataDefinitionLocation>^D1oJ.Bm7r.1.P1</DataDefinitionLocation>
<Value name="1">
<Value>Embedding</Value>
</Value>
</Data>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="Display">
<Selectivity>7.6923%</Selectivity>
<AverageFieldSize>19.15</AverageFieldSize>
</Property>
<Property name="Embedding">
<Selectivity>1</Selectivity>
<AverageFieldSize>8516</AverageFieldSize>
</Property>
<Property name="ID">
<Selectivity>7.6923%</Selectivity>
<AverageFieldSize>39.15</AverageFieldSize>
</Property>
<Property name="Keywords">
<Selectivity>7.6923%</Selectivity>
</Property>
<Property name="Spec">
<Selectivity>7.6923%</Selectivity>
<AverageFieldSize>39.15</AverageFieldSize>
</Property>
<Property name="Type">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999999:"Agent"</OutlierSelectivity>
<AverageFieldSize>7</AverageFieldSize>
</Property>
<SQLMap name="%%DDLBEIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<Index name="DDLBEIndex">
<Location>^D1oJ.Bm7r.2</Location>
</Index>
<Index name="IDKEY">
<Location>^D1oJ.Bm7r.1</Location>
</Index>
</Storage>
</Class>
</Export>
